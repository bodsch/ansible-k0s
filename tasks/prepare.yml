---

- name: include OS specific configuration ({{ ansible_distribution }} ({{ ansible_os_family }}) {{ ansible_distribution_major_version }})
  include_vars: "{{ lookup('first_found', params) }}"
  vars:
    params:
      paths:
        - "vars"
      files:
        # eg. debian-10 / ubuntu-20.04 / centos-8 / oraclelinux-8
        - "{{ ansible_distribution | lower }}-{{ ansible_distribution_major_version }}.yml"
        # eg. archlinux-systemd / archlinux-openrc
        - "{{ ansible_distribution | lower }}-{{ ansible_service_mgr | lower }}.yml"
        # eg. debian / ubuntu / centos / oraclelinux
        - "{{ ansible_distribution | lower }}.yml"
        # eg. redhat / debian / archlinux
        - "{{ ansible_os_family | lower }}.yml"
        - default.yaml
      skip: true

- name: update package cache
  package:
    update_cache: true

- name: define delegate instance for download handling
  set_fact:
    k0s_delegate_to: "{{ ansible_host }}"
    k0s_local_tmp_directory: "{{
        lookup('env', 'CUSTOM_LOCAL_TMP_DIRECTORY') |
        default('/var/cache/ansible/k0s', true) }}/{{ k0s_version }}"
  when:
    - k0s_direct_download

- name: install dependency
  package:
    name: "{{ k0s_requirements }}"
    state: present

- block:
    - name: get latest release
      uri:
        url: "https://api.github.com/repos/k0sproject/k0s/releases/latest"
        method: GET
        return_content: true
        status_code: 200
        body_format: json
        validate_certs: false
        user: "{{ lookup('env', 'GH_USER') | default(omit) }}"
        password: "{{ lookup('env', 'GH_TOKEN') | default(omit) }}"
      no_log: "{{ not lookup('env', 'ANSIBLE_DEBUG') | bool }}"
      register: _latest_release
      until: _latest_release.status == 200
      retries: 5

    - name: set k0s version to {{ _latest_release.json.tag_name[1:] }}
      set_fact:
        k0s_version: "{{ _latest_release.json.tag_name[1:] }}"
  when:
    - k0s_version == "latest"

- name: detect our installation path '{{ k0s_install_path | dirname }}'
  stat:
    path: "{{ k0s_install_path | dirname }}"
    get_checksum: false
  register: stat_k0s_path
  ignore_errors: true

- name: old installation
  block:
    - name: remove installed k0s
      file:
        state: absent
        path: "{{ stat_k0s_path.stat.path }}"

  when:
    - stat_k0s_path is defined
    - stat_k0s_path.stat is defined
    - stat_k0s_path.stat.isdir is defined
    - not stat_k0s_path.stat.isdir

- name: flush handlers
  meta: flush_handlers

- name: detect installed k0s binary
  stat:
    path: "{{ k0s_install_path }}/k0s"
  register: stat_k0s_binary

- name: create download directory
  become: false
  delegate_to: "{{ k0s_delegate_to }}"
  file:
    path: "{{ k0s_local_tmp_directory }}"
    state: directory
    mode: 0750

- name: create install directory
  file:
    path: "{{ k0s_install_path }}"
    state: directory
    owner: "{{ k0s_system_user }}"
    group: "{{ k0s_system_group }}"
    mode: 0755

- name: create ansible local facts directory
  file:
    dest: /etc/ansible/facts.d
    state: directory
    owner: root
    group: root
    mode: 0775

...

