---

- name: configure nodes
  ansible.builtin.debug:
    msg:
      - "{{ k0s_cluster_nodes.initial_controller }}"
  run_once: true

- name: define 'single' argument for a single node installation
  block:
    - name: get cluster members
      ansible.builtin.set_fact:
        k0s_extra_args: ["--single"]
      when:
        - k0s_cluster_nodes | k0s_cluster_members('all') | count == 1

- name: get k0s state
  k0s_status:
    state: initial-controller
    data_dir: "{{ k0s_data_dir }}"
  register: worker_k0s_state

- name: create k0s initial controller service with install command
  k0s_install:
    state: initial-controller
    force: "{{ k0s_force }}"
    debug: "{{ k0s_debug | default(omit) }}"
    verbose: "{{ k0s_verbose | default(omit) }}"
    config: "{{ k0s_config_dir }}/k0s.yaml"
    data_dir: "{{ k0s_data_dir }}"
    enable_worker: "{{ k0s_worker_on_controller | bool }}"
    arguments: "{{ k0s_extra_arguments.controller | default([]) + k0s_extra_args | default([]) }}"
  notify:
    - daemon-reload
    # - restart k0s_controller
  register: install_initial_controller_cmd

- name: controller output
  ansible.builtin.debug:
    msg: "{{ install_initial_controller_cmd.msg }}"

- name: arm specific systemd drop-in
  when:
    - (ansible_facts.architecture is search("arm") and
       ansible_facts.userspace_bits == "64" ) or
      ansible_facts.architecture is search("aarch64")
  block:
    - name: create k0scontroller service drop-in directory
      ansible.builtin.file:
        path: /etc/systemd/system/k0scontroller.service.d
        state: directory
        mode: 0750

    - name: create overwrite.conf
      ansible.builtin.template:
        src: init/aarch64/systemd/overwrite.conf.j2
        dest: /etc/systemd/system/k0scontroller.service.d/overwrite.conf
        mode: 0644
      notify:
        - daemon-reload
        # - restart k0s_controller

- name: flush handlers
  ansible.builtin.meta: flush_handlers

- name: start k0s initial controller
  become: true
  ansible.builtin.service:
    name: k0scontroller
    state: started

- name: Wait until the process is finished and {{ k0s_data_dir }}/pki/admin.conf was created
  delegate_to: "{{ k0s_cluster_nodes.initial_controller }}"
  ansible.builtin.wait_for:
    path: "{{ k0s_data_dir }}/pki/admin.conf"
    state: present

- name: Wait until the process is finished and kube-controller-manager.pid was created
  delegate_to: "{{ k0s_cluster_nodes.initial_controller }}"
  ansible.builtin.wait_for:
    path: /run/k0s/kube-controller-manager.pid
    state: present

- name: start k0s controller
  ansible.builtin.service:
    name: k0scontroller
    state: started
  register: k0scontroller_started
  notify:
    - wait for k8s apiserver

...
