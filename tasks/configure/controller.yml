---

- name: configure controllers
  debug:
    msg:
      - "{{ k0s_cluster_nodes.controllers | join(', ') }}"
  run_once: true

- name: get k0s state
  k0s_status:
    state: controller
    data_dir: "{{ k0s_data_dir }}"
  register: controller_k0s_state

- name: register controller
  when:
    - controller_k0s_state is defined
    - controller_k0s_state.state is defined
    - controller_k0s_state.state == "missing" or
      not controller_k0s_state.version
  block:
    - name: create controller join token
      delegate_to: "{{ k0s_cluster_nodes.initial_controller }}"
      run_once: true
      k0s_token:
        state: create
        role: controller
        expiry: "{{ k0s_token_expiry }}"
        data_dir: "{{ k0s_data_dir }}"
      register: controller_join_token

    - name: store controller join token
      set_fact:
        join_token_controller: "{{ controller_join_token.token }}"
        cacheable: true
      when:
        - controller_join_token is defined
        - controller_join_token.token is defined

    - name: reload facts
      setup:

    - name: write the k0s token file on controller
      template:
        src: k0s/controller-token.j2
        dest: "{{ k0s_token_files.controller }}"
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        mode: 0600

    - name: create k0s controller service with install command
      k0s_install:
        state: controller
        force: "{{ k0s_force }}"
        config: "{{ k0s_config_dir }}/k0s.yaml"
        token_file: "{{ k0s_token_files.controller }}"
        data_dir: "{{ k0s_data_dir }}"
        arguments: "{{ k0s_extra_args | default([]) }}"
      notify:
        - daemon-reload
        - restart k0s_controller
      register: install_controller_cmd

- name: arm specific systemd drop-in
  when:
    - (ansible_facts.architecture is search("arm") and
       ansible_facts.userspace_bits == "64" ) or
      ansible_facts.architecture is search("aarch64")
  block:
    - name: create k0scontroller service drop-in directory
      file:
        path: /etc/systemd/system/k0scontroller.service.d
        state: directory
        mode: 0750

    - name: create overwrite.conf
      template:
        src: init/aarch64/systemd/overwrite.conf.j2
        dest: /etc/systemd/system/k0scontroller.service.d/overwrite.conf
        mode: 0644
      notify:
        - daemon-reload
        - restart k0s_controller

- name: flush handlers
  meta: flush_handlers

# - name: Wait until the process is finished and {{ k0s_data_dir }}/pki/admin.conf was created
#   ansible.builtin.wait_for:
#     path: "{{ k0s_data_dir }}/pki/admin.conf"
#     state: present

- name: start k0s controller
  service:
    name: k0scontroller
    state: started
  register: k0scontroller_started

- name: wait for k8s apiserver on port 6443
  wait_for:
    host: localhost
    port: 6443
    delay: 15
    timeout: 180
  when:
    - k0scontroller_started.changed or
      not k0scontroller_started.state == "started"

...
