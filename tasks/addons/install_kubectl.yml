---

- name: find installed kubectl
  find:
    paths: "/usr/bin,/bin"
    file_type: any
    patterns:
      - "kubectl"
    recurse: false
  register: found_kubectl

- name: download kubectl
  delegate_to: localhost
  block:
    - name: get latest kubectl version
      uri:
        url: https://dl.k8s.io/release/stable.txt
        method: GET
        return_content: true
        status_code: 200
        validate_certs: false
      register: _latest_release
      until: _latest_release.status == 200
      run_once: true
      retries: 5

    - name: set kubectl version to {{ _latest_release.content }}
      set_fact:
        k0s_kubectl_version: "{{ _latest_release.content | replace('v','') }}"

    - name: define tmp directory for download handling
      set_fact:
        kubectl_local_tmp_directory: "{{
          lookup('env', 'CUSTOM_LOCAL_TMP_DIRECTORY') |
          default(lookup('env', 'HOME') ~ '/.cache/ansible/kubectl', true) }}/{{ k0s_kubectl_version }}"
      run_once: "{{ 'true' if not k0s_direct_download else 'false' }}"
      when:
        - not k0s_direct_download

    - name: define delegate instance for download handling
      set_fact:
        k0s_delegate_to: "{{ ansible_host }}"
        kubectl_local_tmp_directory: "{{
            lookup('env', 'CUSTOM_LOCAL_TMP_DIRECTORY') |
            default('/var/cache/ansible/kubectl', true) }}/{{ k0s_kubectl_version }}"
      run_once: "{{ 'true' if not k0s_direct_download else 'false' }}"
      when:
        - k0s_direct_download

    - name: create kubectl download directory
      become: false
      delegate_to: "{{ k0s_delegate_to }}"
      file:
        path: "{{ kubectl_local_tmp_directory }}"
        state: directory
        mode: 0750
      run_once: "{{ 'true' if not k0s_direct_download else 'false' }}"

    - name: download k0s binary {{ 'to ansible controller' if not k0s_direct_download else '' }}
      become: false
      delegate_to: "{{ k0s_delegate_to }}"
      get_url:
        url: "https://dl.k8s.io/release/v{{ k0s_kubectl_version }}/bin/linux/{{ system_architecture }}/kubectl"
        dest: "{{ kubectl_local_tmp_directory }}/"
        mode: 0750
      register: _download_kubectl
      until: _download_kubectl is succeeded
      retries: 5
      delay: 2
      check_mode: false
      run_once: "{{ 'true' if not k0s_direct_download else 'false' }}"
  when:
    - found_kubectl.matched is defined
    - found_kubectl.matched == 0

- name: install kubectl
  block:
    - name: create kubectl install directory
      file:
        path: /usr/local/bin/kubectl/{{ k0s_kubectl_version }}
        state: directory
        owner: "{{ k0s_system_user }}"
        group: "{{ k0s_system_group }}"
        mode: 0755

    - name: propagate kubectl binary
      copy:
        src: "{{ kubectl_local_tmp_directory }}/kubectl"
        dest: "/usr/local/bin/kubectl/{{ k0s_kubectl_version }}/"
        mode: 0755
        owner: "{{ k0s_system_user }}"
        group: "{{ k0s_system_group }}"
        remote_src: "{{ 'true' if k0s_direct_download else 'false' }}"

    - name: make files executable
      file:
        path: "/usr/local/bin/kubectl/{{ k0s_kubectl_version }}/kubectl"
        mode: 0755
        owner: "{{ k0s_system_user }}"
        group: "{{ k0s_system_group }}"

    - name: create link to binary
      file:
        src: "/usr/local/bin/kubectl/{{ k0s_kubectl_version }}/kubectl"
        dest: "/usr/bin/kubectl"
        state: link
        force: true
        follow: false
  when:
    - found_kubectl.matched is defined
    - found_kubectl.matched == 0


...
